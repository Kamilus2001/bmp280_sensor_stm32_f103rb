
bmp280spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003498  08003498  00013498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034a0  080034a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a4  080034a4  000134a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080034b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080034b4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ed7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015d1  00000000  00000000  00027f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  000294e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014300  00000000  00000000  0002a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067f1  00000000  00000000  0003e768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006bf6b  00000000  00000000  00044f59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b0ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e8  00000000  00000000  000b0f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033f8 	.word	0x080033f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080033f8 	.word	0x080033f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000218:	f1a2 0201 	sub.w	r2, r2, #1
 800021c:	d1ed      	bne.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <__aeabi_ldivmod>:
 8000664:	b97b      	cbnz	r3, 8000686 <__aeabi_ldivmod+0x22>
 8000666:	b972      	cbnz	r2, 8000686 <__aeabi_ldivmod+0x22>
 8000668:	2900      	cmp	r1, #0
 800066a:	bfbe      	ittt	lt
 800066c:	2000      	movlt	r0, #0
 800066e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000672:	e006      	blt.n	8000682 <__aeabi_ldivmod+0x1e>
 8000674:	bf08      	it	eq
 8000676:	2800      	cmpeq	r0, #0
 8000678:	bf1c      	itt	ne
 800067a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800067e:	f04f 30ff 	movne.w	r0, #4294967295
 8000682:	f000 b9a7 	b.w	80009d4 <__aeabi_idiv0>
 8000686:	f1ad 0c08 	sub.w	ip, sp, #8
 800068a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800068e:	2900      	cmp	r1, #0
 8000690:	db09      	blt.n	80006a6 <__aeabi_ldivmod+0x42>
 8000692:	2b00      	cmp	r3, #0
 8000694:	db1a      	blt.n	80006cc <__aeabi_ldivmod+0x68>
 8000696:	f000 f835 	bl	8000704 <__udivmoddi4>
 800069a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800069e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a2:	b004      	add	sp, #16
 80006a4:	4770      	bx	lr
 80006a6:	4240      	negs	r0, r0
 80006a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db1b      	blt.n	80006e8 <__aeabi_ldivmod+0x84>
 80006b0:	f000 f828 	bl	8000704 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4240      	negs	r0, r0
 80006c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c4:	4252      	negs	r2, r2
 80006c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ca:	4770      	bx	lr
 80006cc:	4252      	negs	r2, r2
 80006ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006d2:	f000 f817 	bl	8000704 <__udivmoddi4>
 80006d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006de:	b004      	add	sp, #16
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	4770      	bx	lr
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	f000 f809 	bl	8000704 <__udivmoddi4>
 80006f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006fa:	b004      	add	sp, #16
 80006fc:	4252      	negs	r2, r2
 80006fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000702:	4770      	bx	lr

08000704 <__udivmoddi4>:
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	468c      	mov	ip, r1
 800070a:	4604      	mov	r4, r0
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d14b      	bne.n	80007aa <__udivmoddi4+0xa6>
 8000712:	428a      	cmp	r2, r1
 8000714:	4615      	mov	r5, r2
 8000716:	d967      	bls.n	80007e8 <__udivmoddi4+0xe4>
 8000718:	fab2 f282 	clz	r2, r2
 800071c:	b14a      	cbz	r2, 8000732 <__udivmoddi4+0x2e>
 800071e:	f1c2 0720 	rsb	r7, r2, #32
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	fa20 f707 	lsr.w	r7, r0, r7
 800072a:	4095      	lsls	r5, r2
 800072c:	ea47 0c03 	orr.w	ip, r7, r3
 8000730:	4094      	lsls	r4, r2
 8000732:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000736:	fbbc f7fe 	udiv	r7, ip, lr
 800073a:	fa1f f885 	uxth.w	r8, r5
 800073e:	fb0e c317 	mls	r3, lr, r7, ip
 8000742:	fb07 f908 	mul.w	r9, r7, r8
 8000746:	0c21      	lsrs	r1, r4, #16
 8000748:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074c:	4599      	cmp	r9, r3
 800074e:	d909      	bls.n	8000764 <__udivmoddi4+0x60>
 8000750:	18eb      	adds	r3, r5, r3
 8000752:	f107 31ff 	add.w	r1, r7, #4294967295
 8000756:	f080 811c 	bcs.w	8000992 <__udivmoddi4+0x28e>
 800075a:	4599      	cmp	r9, r3
 800075c:	f240 8119 	bls.w	8000992 <__udivmoddi4+0x28e>
 8000760:	3f02      	subs	r7, #2
 8000762:	442b      	add	r3, r5
 8000764:	eba3 0309 	sub.w	r3, r3, r9
 8000768:	fbb3 f0fe 	udiv	r0, r3, lr
 800076c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000770:	fb00 f108 	mul.w	r1, r0, r8
 8000774:	b2a4      	uxth	r4, r4
 8000776:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077a:	42a1      	cmp	r1, r4
 800077c:	d909      	bls.n	8000792 <__udivmoddi4+0x8e>
 800077e:	192c      	adds	r4, r5, r4
 8000780:	f100 33ff 	add.w	r3, r0, #4294967295
 8000784:	f080 8107 	bcs.w	8000996 <__udivmoddi4+0x292>
 8000788:	42a1      	cmp	r1, r4
 800078a:	f240 8104 	bls.w	8000996 <__udivmoddi4+0x292>
 800078e:	3802      	subs	r0, #2
 8000790:	442c      	add	r4, r5
 8000792:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000796:	2700      	movs	r7, #0
 8000798:	1a64      	subs	r4, r4, r1
 800079a:	b11e      	cbz	r6, 80007a4 <__udivmoddi4+0xa0>
 800079c:	2300      	movs	r3, #0
 800079e:	40d4      	lsrs	r4, r2
 80007a0:	e9c6 4300 	strd	r4, r3, [r6]
 80007a4:	4639      	mov	r1, r7
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	428b      	cmp	r3, r1
 80007ac:	d909      	bls.n	80007c2 <__udivmoddi4+0xbe>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	f000 80ec 	beq.w	800098c <__udivmoddi4+0x288>
 80007b4:	2700      	movs	r7, #0
 80007b6:	e9c6 0100 	strd	r0, r1, [r6]
 80007ba:	4638      	mov	r0, r7
 80007bc:	4639      	mov	r1, r7
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	fab3 f783 	clz	r7, r3
 80007c6:	2f00      	cmp	r7, #0
 80007c8:	d148      	bne.n	800085c <__udivmoddi4+0x158>
 80007ca:	428b      	cmp	r3, r1
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xd0>
 80007ce:	4282      	cmp	r2, r0
 80007d0:	f200 80fb 	bhi.w	80009ca <__udivmoddi4+0x2c6>
 80007d4:	1a84      	subs	r4, r0, r2
 80007d6:	eb61 0303 	sbc.w	r3, r1, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	469c      	mov	ip, r3
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d0e0      	beq.n	80007a4 <__udivmoddi4+0xa0>
 80007e2:	e9c6 4c00 	strd	r4, ip, [r6]
 80007e6:	e7dd      	b.n	80007a4 <__udivmoddi4+0xa0>
 80007e8:	b902      	cbnz	r2, 80007ec <__udivmoddi4+0xe8>
 80007ea:	deff      	udf	#255	; 0xff
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	2a00      	cmp	r2, #0
 80007f2:	f040 808f 	bne.w	8000914 <__udivmoddi4+0x210>
 80007f6:	2701      	movs	r7, #1
 80007f8:	1b49      	subs	r1, r1, r5
 80007fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80007fe:	fa1f f985 	uxth.w	r9, r5
 8000802:	fbb1 fef8 	udiv	lr, r1, r8
 8000806:	fb08 111e 	mls	r1, r8, lr, r1
 800080a:	fb09 f00e 	mul.w	r0, r9, lr
 800080e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000812:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000816:	4298      	cmp	r0, r3
 8000818:	d907      	bls.n	800082a <__udivmoddi4+0x126>
 800081a:	18eb      	adds	r3, r5, r3
 800081c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000820:	d202      	bcs.n	8000828 <__udivmoddi4+0x124>
 8000822:	4298      	cmp	r0, r3
 8000824:	f200 80cd 	bhi.w	80009c2 <__udivmoddi4+0x2be>
 8000828:	468e      	mov	lr, r1
 800082a:	1a1b      	subs	r3, r3, r0
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	fb09 f900 	mul.w	r9, r9, r0
 8000838:	b2a4      	uxth	r4, r4
 800083a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083e:	45a1      	cmp	r9, r4
 8000840:	d907      	bls.n	8000852 <__udivmoddi4+0x14e>
 8000842:	192c      	adds	r4, r5, r4
 8000844:	f100 33ff 	add.w	r3, r0, #4294967295
 8000848:	d202      	bcs.n	8000850 <__udivmoddi4+0x14c>
 800084a:	45a1      	cmp	r9, r4
 800084c:	f200 80b6 	bhi.w	80009bc <__udivmoddi4+0x2b8>
 8000850:	4618      	mov	r0, r3
 8000852:	eba4 0409 	sub.w	r4, r4, r9
 8000856:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800085a:	e79e      	b.n	800079a <__udivmoddi4+0x96>
 800085c:	f1c7 0520 	rsb	r5, r7, #32
 8000860:	40bb      	lsls	r3, r7
 8000862:	fa22 fc05 	lsr.w	ip, r2, r5
 8000866:	ea4c 0c03 	orr.w	ip, ip, r3
 800086a:	fa21 f405 	lsr.w	r4, r1, r5
 800086e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000872:	fbb4 f9fe 	udiv	r9, r4, lr
 8000876:	fa1f f88c 	uxth.w	r8, ip
 800087a:	fb0e 4419 	mls	r4, lr, r9, r4
 800087e:	fa20 f305 	lsr.w	r3, r0, r5
 8000882:	40b9      	lsls	r1, r7
 8000884:	fb09 fa08 	mul.w	sl, r9, r8
 8000888:	4319      	orrs	r1, r3
 800088a:	0c0b      	lsrs	r3, r1, #16
 800088c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000890:	45a2      	cmp	sl, r4
 8000892:	fa02 f207 	lsl.w	r2, r2, r7
 8000896:	fa00 f307 	lsl.w	r3, r0, r7
 800089a:	d90b      	bls.n	80008b4 <__udivmoddi4+0x1b0>
 800089c:	eb1c 0404 	adds.w	r4, ip, r4
 80008a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80008a4:	f080 8088 	bcs.w	80009b8 <__udivmoddi4+0x2b4>
 80008a8:	45a2      	cmp	sl, r4
 80008aa:	f240 8085 	bls.w	80009b8 <__udivmoddi4+0x2b4>
 80008ae:	f1a9 0902 	sub.w	r9, r9, #2
 80008b2:	4464      	add	r4, ip
 80008b4:	eba4 040a 	sub.w	r4, r4, sl
 80008b8:	fbb4 f0fe 	udiv	r0, r4, lr
 80008bc:	fb0e 4410 	mls	r4, lr, r0, r4
 80008c0:	fb00 fa08 	mul.w	sl, r0, r8
 80008c4:	b289      	uxth	r1, r1
 80008c6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80008ca:	45a2      	cmp	sl, r4
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0x1dc>
 80008ce:	eb1c 0404 	adds.w	r4, ip, r4
 80008d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80008d6:	d26b      	bcs.n	80009b0 <__udivmoddi4+0x2ac>
 80008d8:	45a2      	cmp	sl, r4
 80008da:	d969      	bls.n	80009b0 <__udivmoddi4+0x2ac>
 80008dc:	3802      	subs	r0, #2
 80008de:	4464      	add	r4, ip
 80008e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e4:	fba0 8902 	umull	r8, r9, r0, r2
 80008e8:	eba4 040a 	sub.w	r4, r4, sl
 80008ec:	454c      	cmp	r4, r9
 80008ee:	4641      	mov	r1, r8
 80008f0:	46ce      	mov	lr, r9
 80008f2:	d354      	bcc.n	800099e <__udivmoddi4+0x29a>
 80008f4:	d051      	beq.n	800099a <__udivmoddi4+0x296>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	d069      	beq.n	80009ce <__udivmoddi4+0x2ca>
 80008fa:	1a5a      	subs	r2, r3, r1
 80008fc:	eb64 040e 	sbc.w	r4, r4, lr
 8000900:	fa04 f505 	lsl.w	r5, r4, r5
 8000904:	fa22 f307 	lsr.w	r3, r2, r7
 8000908:	40fc      	lsrs	r4, r7
 800090a:	431d      	orrs	r5, r3
 800090c:	e9c6 5400 	strd	r5, r4, [r6]
 8000910:	2700      	movs	r7, #0
 8000912:	e747      	b.n	80007a4 <__udivmoddi4+0xa0>
 8000914:	4095      	lsls	r5, r2
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	fa21 f003 	lsr.w	r0, r1, r3
 800091e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000922:	fbb0 f7f8 	udiv	r7, r0, r8
 8000926:	fa1f f985 	uxth.w	r9, r5
 800092a:	fb08 0017 	mls	r0, r8, r7, r0
 800092e:	fa24 f303 	lsr.w	r3, r4, r3
 8000932:	4091      	lsls	r1, r2
 8000934:	fb07 fc09 	mul.w	ip, r7, r9
 8000938:	430b      	orrs	r3, r1
 800093a:	0c19      	lsrs	r1, r3, #16
 800093c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000940:	458c      	cmp	ip, r1
 8000942:	fa04 f402 	lsl.w	r4, r4, r2
 8000946:	d907      	bls.n	8000958 <__udivmoddi4+0x254>
 8000948:	1869      	adds	r1, r5, r1
 800094a:	f107 30ff 	add.w	r0, r7, #4294967295
 800094e:	d231      	bcs.n	80009b4 <__udivmoddi4+0x2b0>
 8000950:	458c      	cmp	ip, r1
 8000952:	d92f      	bls.n	80009b4 <__udivmoddi4+0x2b0>
 8000954:	3f02      	subs	r7, #2
 8000956:	4429      	add	r1, r5
 8000958:	eba1 010c 	sub.w	r1, r1, ip
 800095c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000960:	fb08 1c10 	mls	ip, r8, r0, r1
 8000964:	fb00 fe09 	mul.w	lr, r0, r9
 8000968:	b299      	uxth	r1, r3
 800096a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800096e:	458e      	cmp	lr, r1
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x27e>
 8000972:	1869      	adds	r1, r5, r1
 8000974:	f100 33ff 	add.w	r3, r0, #4294967295
 8000978:	d218      	bcs.n	80009ac <__udivmoddi4+0x2a8>
 800097a:	458e      	cmp	lr, r1
 800097c:	d916      	bls.n	80009ac <__udivmoddi4+0x2a8>
 800097e:	3802      	subs	r0, #2
 8000980:	4429      	add	r1, r5
 8000982:	eba1 010e 	sub.w	r1, r1, lr
 8000986:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800098a:	e73a      	b.n	8000802 <__udivmoddi4+0xfe>
 800098c:	4637      	mov	r7, r6
 800098e:	4630      	mov	r0, r6
 8000990:	e708      	b.n	80007a4 <__udivmoddi4+0xa0>
 8000992:	460f      	mov	r7, r1
 8000994:	e6e6      	b.n	8000764 <__udivmoddi4+0x60>
 8000996:	4618      	mov	r0, r3
 8000998:	e6fb      	b.n	8000792 <__udivmoddi4+0x8e>
 800099a:	4543      	cmp	r3, r8
 800099c:	d2ab      	bcs.n	80008f6 <__udivmoddi4+0x1f2>
 800099e:	ebb8 0102 	subs.w	r1, r8, r2
 80009a2:	eb69 020c 	sbc.w	r2, r9, ip
 80009a6:	3801      	subs	r0, #1
 80009a8:	4696      	mov	lr, r2
 80009aa:	e7a4      	b.n	80008f6 <__udivmoddi4+0x1f2>
 80009ac:	4618      	mov	r0, r3
 80009ae:	e7e8      	b.n	8000982 <__udivmoddi4+0x27e>
 80009b0:	4608      	mov	r0, r1
 80009b2:	e795      	b.n	80008e0 <__udivmoddi4+0x1dc>
 80009b4:	4607      	mov	r7, r0
 80009b6:	e7cf      	b.n	8000958 <__udivmoddi4+0x254>
 80009b8:	4681      	mov	r9, r0
 80009ba:	e77b      	b.n	80008b4 <__udivmoddi4+0x1b0>
 80009bc:	3802      	subs	r0, #2
 80009be:	442c      	add	r4, r5
 80009c0:	e747      	b.n	8000852 <__udivmoddi4+0x14e>
 80009c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80009c6:	442b      	add	r3, r5
 80009c8:	e72f      	b.n	800082a <__udivmoddi4+0x126>
 80009ca:	4638      	mov	r0, r7
 80009cc:	e707      	b.n	80007de <__udivmoddi4+0xda>
 80009ce:	4637      	mov	r7, r6
 80009d0:	e6e8      	b.n	80007a4 <__udivmoddi4+0xa0>
 80009d2:	bf00      	nop

080009d4 <__aeabi_idiv0>:
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_Init+0x28>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_Init+0x28>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f929 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 f808 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f4:	f002 fb32 	bl	800305c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40022000 	.word	0x40022000

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x54>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <HAL_InitTick+0x58>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f933 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00e      	b.n	8000a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d80a      	bhi.n	8000a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f000 f909 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <HAL_InitTick+0x5c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000000 	.word	0x20000000

08000a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x20>)
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	20000004 	.word	0x20000004
 8000a84:	20000028 	.word	0x20000028

08000a88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	; (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000028 	.word	0x20000028

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fff0 	bl	8000a88 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_Delay+0x40>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffe0 	bl	8000a88 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000004 	.word	0x20000004

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff90 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff49 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff90 	bl	8000b98 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5f 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb0 	bl	8000bfc <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b08b      	sub	sp, #44	; 0x2c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e127      	b.n	8000f0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f040 8116 	bne.w	8000f06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d034      	beq.n	8000d4c <HAL_GPIO_Init+0xa4>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d80d      	bhi.n	8000d02 <HAL_GPIO_Init+0x5a>
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d02b      	beq.n	8000d42 <HAL_GPIO_Init+0x9a>
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d804      	bhi.n	8000cf8 <HAL_GPIO_Init+0x50>
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d031      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d01c      	beq.n	8000d30 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf6:	e048      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d043      	beq.n	8000d84 <HAL_GPIO_Init+0xdc>
 8000cfc:	2b11      	cmp	r3, #17
 8000cfe:	d01b      	beq.n	8000d38 <HAL_GPIO_Init+0x90>
          break;
 8000d00:	e043      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d02:	4a89      	ldr	r2, [pc, #548]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d026      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d08:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_GPIO_Init+0x280>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d806      	bhi.n	8000d1c <HAL_GPIO_Init+0x74>
 8000d0e:	4a87      	ldr	r2, [pc, #540]	; (8000f2c <HAL_GPIO_Init+0x284>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d020      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d14:	4a86      	ldr	r2, [pc, #536]	; (8000f30 <HAL_GPIO_Init+0x288>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01d      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d1a:	e036      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d1c:	4a85      	ldr	r2, [pc, #532]	; (8000f34 <HAL_GPIO_Init+0x28c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d22:	4a85      	ldr	r2, [pc, #532]	; (8000f38 <HAL_GPIO_Init+0x290>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d016      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
 8000d28:	4a84      	ldr	r2, [pc, #528]	; (8000f3c <HAL_GPIO_Init+0x294>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0xae>
          break;
 8000d2e:	e02c      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e028      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e023      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	3308      	adds	r3, #8
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e01e      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	330c      	adds	r3, #12
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e019      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e012      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	611a      	str	r2, [r3, #16]
          break;
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	615a      	str	r2, [r3, #20]
          break;
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2bff      	cmp	r3, #255	; 0xff
 8000d8e:	d801      	bhi.n	8000d94 <HAL_GPIO_Init+0xec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	e001      	b.n	8000d98 <HAL_GPIO_Init+0xf0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3304      	adds	r3, #4
 8000d98:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2bff      	cmp	r3, #255	; 0xff
 8000d9e:	d802      	bhi.n	8000da6 <HAL_GPIO_Init+0xfe>
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x104>
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	3b08      	subs	r3, #8
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	210f      	movs	r1, #15
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	6a39      	ldr	r1, [r7, #32]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8096 	beq.w	8000f06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b59      	ldr	r3, [pc, #356]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a58      	ldr	r2, [pc, #352]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b56      	ldr	r3, [pc, #344]	; (8000f40 <HAL_GPIO_Init+0x298>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df2:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_GPIO_Init+0x2a0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d013      	beq.n	8000e46 <HAL_GPIO_Init+0x19e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_GPIO_Init+0x2a4>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d00d      	beq.n	8000e42 <HAL_GPIO_Init+0x19a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a49      	ldr	r2, [pc, #292]	; (8000f50 <HAL_GPIO_Init+0x2a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d007      	beq.n	8000e3e <HAL_GPIO_Init+0x196>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a48      	ldr	r2, [pc, #288]	; (8000f54 <HAL_GPIO_Init+0x2ac>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d101      	bne.n	8000e3a <HAL_GPIO_Init+0x192>
 8000e36:	2303      	movs	r3, #3
 8000e38:	e006      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	e004      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e002      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_GPIO_Init+0x1a0>
 8000e46:	2300      	movs	r3, #0
 8000e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e4a:	f002 0203 	and.w	r2, r2, #3
 8000e4e:	0092      	lsls	r2, r2, #2
 8000e50:	4093      	lsls	r3, r2
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e58:	493a      	ldr	r1, [pc, #232]	; (8000f44 <HAL_GPIO_Init+0x29c>)
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3302      	adds	r3, #2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e72:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4938      	ldr	r1, [pc, #224]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
 8000e7e:	e006      	b.n	8000e8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	4933      	ldr	r1, [pc, #204]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	492e      	ldr	r1, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4929      	ldr	r1, [pc, #164]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec4:	689a      	ldr	r2, [r3, #8]
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	608b      	str	r3, [r1, #8]
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	491f      	ldr	r1, [pc, #124]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	491a      	ldr	r1, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60cb      	str	r3, [r1, #12]
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4915      	ldr	r1, [pc, #84]	; (8000f58 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	3301      	adds	r3, #1
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f47f aed0 	bne.w	8000cbc <HAL_GPIO_Init+0x14>
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	372c      	adds	r7, #44	; 0x2c
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	10210000 	.word	0x10210000
 8000f2c:	10110000 	.word	0x10110000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10310000 	.word	0x10310000
 8000f38:	10320000 	.word	0x10320000
 8000f3c:	10220000 	.word	0x10220000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	611a      	str	r2, [r3, #16]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e26c      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fac:	4b92      	ldr	r3, [pc, #584]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d00c      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb8:	4b8f      	ldr	r3, [pc, #572]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 030c 	and.w	r3, r3, #12
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d112      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
 8000fc4:	4b8c      	ldr	r3, [pc, #560]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd0:	d10b      	bne.n	8000fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd2:	4b89      	ldr	r3, [pc, #548]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d06c      	beq.n	80010b8 <HAL_RCC_OscConfig+0x12c>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d168      	bne.n	80010b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e246      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x76>
 8000ff4:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a7f      	ldr	r2, [pc, #508]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e02e      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x98>
 800100a:	4b7b      	ldr	r3, [pc, #492]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a7a      	ldr	r2, [pc, #488]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b78      	ldr	r3, [pc, #480]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a77      	ldr	r2, [pc, #476]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e01d      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0xbc>
 800102e:	4b72      	ldr	r3, [pc, #456]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b6f      	ldr	r3, [pc, #444]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6e      	ldr	r2, [pc, #440]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e00b      	b.n	8001060 <HAL_RCC_OscConfig+0xd4>
 8001048:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a67      	ldr	r2, [pc, #412]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800105a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800105e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d013      	beq.n	8001090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fd0e 	bl	8000a88 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fd0a 	bl	8000a88 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1fa      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0f0      	beq.n	8001070 <HAL_RCC_OscConfig+0xe4>
 800108e:	e014      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcfa 	bl	8000a88 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fcf6 	bl	8000a88 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e1e6      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f0      	bne.n	8001098 <HAL_RCC_OscConfig+0x10c>
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d063      	beq.n	800118e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 030c 	and.w	r3, r3, #12
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d11c      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d116      	bne.n	8001118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e1ba      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4939      	ldr	r1, [pc, #228]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001116:	e03a      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001126:	f7ff fcaf 	bl	8000a88 <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112e:	f7ff fcab 	bl	8000a88 <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e19b      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4927      	ldr	r1, [pc, #156]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e015      	b.n	800118e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_RCC_OscConfig+0x270>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fc8e 	bl	8000a88 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fc8a 	bl	8000a88 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e17a      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	2b00      	cmp	r3, #0
 8001198:	d03a      	beq.n	8001210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc6e 	bl	8000a88 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e15a      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f000 fada 	bl	8001788 <RCC_Delay>
 80011d4:	e01c      	b.n	8001210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_RCC_OscConfig+0x274>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc54 	bl	8000a88 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e2:	e00f      	b.n	8001204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc50 	bl	8000a88 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d908      	bls.n	8001204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e140      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	42420000 	.word	0x42420000
 8001200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e9      	bne.n	80011e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80a6 	beq.w	800136a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001222:	4b97      	ldr	r3, [pc, #604]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10d      	bne.n	800124a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b94      	ldr	r3, [pc, #592]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a93      	ldr	r2, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001246:	2301      	movs	r3, #1
 8001248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	4b8e      	ldr	r3, [pc, #568]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	2b00      	cmp	r3, #0
 8001254:	d118      	bne.n	8001288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001256:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a8a      	ldr	r2, [pc, #552]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001262:	f7ff fc11 	bl	8000a88 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126a:	f7ff fc0d 	bl	8000a88 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0fd      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <HAL_RCC_OscConfig+0x4f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x312>
 8001290:	4b7b      	ldr	r3, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a7a      	ldr	r2, [pc, #488]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e02d      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x334>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	f023 0301 	bic.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4a72      	ldr	r2, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	f023 0304 	bic.w	r3, r3, #4
 80012bc:	6213      	str	r3, [r2, #32]
 80012be:	e01c      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d10c      	bne.n	80012e2 <HAL_RCC_OscConfig+0x356>
 80012c8:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a6c      	ldr	r2, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6213      	str	r3, [r2, #32]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4a69      	ldr	r2, [pc, #420]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6213      	str	r3, [r2, #32]
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x36e>
 80012e2:	4b67      	ldr	r3, [pc, #412]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4a66      	ldr	r2, [pc, #408]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6213      	str	r3, [r2, #32]
 80012ee:	4b64      	ldr	r3, [pc, #400]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4a63      	ldr	r2, [pc, #396]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 0304 	bic.w	r3, r3, #4
 80012f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d015      	beq.n	800132e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff fbc1 	bl	8000a88 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fbbd 	bl	8000a88 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	; 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0ab      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ee      	beq.n	800130a <HAL_RCC_OscConfig+0x37e>
 800132c:	e014      	b.n	8001358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fbab 	bl	8000a88 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	e00a      	b.n	800134c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f7ff fba7 	bl	8000a88 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f241 3288 	movw	r2, #5000	; 0x1388
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e095      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	4b4c      	ldr	r3, [pc, #304]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1ee      	bne.n	8001336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d105      	bne.n	800136a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800135e:	4b48      	ldr	r3, [pc, #288]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a47      	ldr	r2, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8081 	beq.w	8001476 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001374:	4b42      	ldr	r3, [pc, #264]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d061      	beq.n	8001444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d146      	bne.n	8001416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb7b 	bl	8000a88 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001396:	f7ff fb77 	bl	8000a88 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e067      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d108      	bne.n	80013d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	492d      	ldr	r1, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a19      	ldr	r1, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	430b      	orrs	r3, r1
 80013e2:	4927      	ldr	r1, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff fb4b 	bl	8000a88 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fb47 	bl	8000a88 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e037      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f0      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46a>
 8001414:	e02f      	b.n	8001476 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <HAL_RCC_OscConfig+0x4fc>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb34 	bl	8000a88 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff fb30 	bl	8000a88 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e020      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x498>
 8001442:	e018      	b.n	8001476 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e013      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	429a      	cmp	r2, r3
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	429a      	cmp	r2, r3
 8001470:	d001      	beq.n	8001476 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40007000 	.word	0x40007000
 8001488:	42420060 	.word	0x42420060

0800148c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d0      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d910      	bls.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b67      	ldr	r3, [pc, #412]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4965      	ldr	r1, [pc, #404]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0b8      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e8:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001500:	4b53      	ldr	r3, [pc, #332]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	494d      	ldr	r1, [pc, #308]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d040      	beq.n	80015ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d115      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e07f      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e073      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06b      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f023 0203 	bic.w	r2, r3, #3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4936      	ldr	r1, [pc, #216]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff fa84 	bl	8000a88 <HAL_GetTick>
 8001580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	e00a      	b.n	800159a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	f7ff fa80 	bl	8000a88 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e053      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 020c 	and.w	r2, r3, #12
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1eb      	bne.n	8001584 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d210      	bcs.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0207 	bic.w	r2, r3, #7
 80015c2:	4922      	ldr	r1, [pc, #136]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d001      	beq.n	80015dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e032      	b.n	8001642 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d008      	beq.n	80015fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4916      	ldr	r1, [pc, #88]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d009      	beq.n	800161a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	490e      	ldr	r1, [pc, #56]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161a:	f000 f821 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 800161e:	4601      	mov	r1, r0
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_RCC_ClockConfig+0x1c8>)
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	fa21 f303 	lsr.w	r3, r1, r3
 8001632:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1cc>)
 8001634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1d0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff f9e2 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000
 8001650:	40021000 	.word	0x40021000
 8001654:	08003458 	.word	0x08003458
 8001658:	20000008 	.word	0x20000008
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b490      	push	{r4, r7}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001668:	1d3c      	adds	r4, r7, #4
 800166a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800166c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	2300      	movs	r3, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d002      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x40>
 800169a:	2b08      	cmp	r3, #8
 800169c:	d003      	beq.n	80016a6 <HAL_RCC_GetSysClockFreq+0x46>
 800169e:	e02d      	b.n	80016fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	e02d      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b2:	4413      	add	r3, r2
 80016b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0c5b      	lsrs	r3, r3, #17
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d2:	4413      	add	r3, r2
 80016d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016de:	fb02 f203 	mul.w	r2, r2, r3
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	e004      	b.n	80016f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	623b      	str	r3, [r7, #32]
      break;
 80016fa:	e002      	b.n	8001702 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	; (800171c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016fe:	623b      	str	r3, [r7, #32]
      break;
 8001700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001702:	6a3b      	ldr	r3, [r7, #32]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bc90      	pop	{r4, r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	08003410 	.word	0x08003410
 8001714:	08003420 	.word	0x08003420
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	003d0900 	.word	0x003d0900

08001724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_RCC_GetHCLKFreq+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800173c:	f7ff fff2 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 8001740:	4601      	mov	r1, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <HAL_RCC_GetPCLK1Freq+0x24>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	08003468 	.word	0x08003468

08001760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001764:	f7ff ffde 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 8001768:	4601      	mov	r1, r0
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	0adb      	lsrs	r3, r3, #11
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	08003468 	.word	0x08003468

08001788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <RCC_Delay+0x34>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <RCC_Delay+0x38>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0a5b      	lsrs	r3, r3, #9
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017a4:	bf00      	nop
  }
  while (Delay --);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	60fa      	str	r2, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <RCC_Delay+0x1c>
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	10624dd3 	.word	0x10624dd3

080017c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e053      	b.n	800187e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d106      	bne.n	80017f6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f001 fc65 	bl	80030c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800180c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	ea42 0103 	orr.w	r1, r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	0c1a      	lsrs	r2, r3, #16
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f002 0204 	and.w	r2, r2, #4
 800185c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69da      	ldr	r2, [r3, #28]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b088      	sub	sp, #32
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_SPI_Transmit+0x22>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e11e      	b.n	8001ae6 <HAL_SPI_Transmit+0x260>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b0:	f7ff f8ea 	bl	8000a88 <HAL_GetTick>
 80018b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d002      	beq.n	80018cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018ca:	e103      	b.n	8001ad4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_SPI_Transmit+0x52>
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018dc:	e0fa      	b.n	8001ad4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2203      	movs	r2, #3
 80018e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	88fa      	ldrh	r2, [r7, #6]
 80018f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001924:	d107      	bne.n	8001936 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001940:	2b40      	cmp	r3, #64	; 0x40
 8001942:	d007      	beq.n	8001954 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195c:	d14b      	bne.n	80019f6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_SPI_Transmit+0xe6>
 8001966:	8afb      	ldrh	r3, [r7, #22]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d13e      	bne.n	80019ea <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	1c9a      	adds	r2, r3, #2
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001986:	b29b      	uxth	r3, r3
 8001988:	3b01      	subs	r3, #1
 800198a:	b29a      	uxth	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001990:	e02b      	b.n	80019ea <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b02      	cmp	r3, #2
 800199e:	d112      	bne.n	80019c6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	881a      	ldrh	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	1c9a      	adds	r2, r3, #2
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80019c4:	e011      	b.n	80019ea <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019c6:	f7ff f85f 	bl	8000a88 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d803      	bhi.n	80019de <HAL_SPI_Transmit+0x158>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d102      	bne.n	80019e4 <HAL_SPI_Transmit+0x15e>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019e8:	e074      	b.n	8001ad4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ce      	bne.n	8001992 <HAL_SPI_Transmit+0x10c>
 80019f4:	e04c      	b.n	8001a90 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_SPI_Transmit+0x17e>
 80019fe:	8afb      	ldrh	r3, [r7, #22]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d140      	bne.n	8001a86 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	7812      	ldrb	r2, [r2, #0]
 8001a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a2a:	e02c      	b.n	8001a86 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d113      	bne.n	8001a62 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	330c      	adds	r3, #12
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a60:	e011      	b.n	8001a86 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a62:	f7ff f811 	bl	8000a88 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d803      	bhi.n	8001a7a <HAL_SPI_Transmit+0x1f4>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d102      	bne.n	8001a80 <HAL_SPI_Transmit+0x1fa>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a84:	e026      	b.n	8001ad4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1cd      	bne.n	8001a2c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fb91 	bl	80021bc <SPI_EndRxTxTransaction>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10a      	bne.n	8001ac4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	77fb      	strb	r3, [r7, #31]
 8001ad0:	e000      	b.n	8001ad4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001ad2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b088      	sub	sp, #32
 8001af2:	af02      	add	r7, sp, #8
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b0a:	d112      	bne.n	8001b32 <HAL_SPI_Receive+0x44>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10e      	bne.n	8001b32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4613      	mov	r3, r2
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	68b9      	ldr	r1, [r7, #8]
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 f8e9 	bl	8001d00 <HAL_SPI_TransmitReceive>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	e0e2      	b.n	8001cf8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_SPI_Receive+0x52>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0db      	b.n	8001cf8 <HAL_SPI_Receive+0x20a>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b48:	f7fe ff9e 	bl	8000a88 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d002      	beq.n	8001b60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b5e:	e0c2      	b.n	8001ce6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_SPI_Receive+0x7e>
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b70:	e0b9      	b.n	8001ce6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2204      	movs	r2, #4
 8001b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	88fa      	ldrh	r2, [r7, #6]
 8001b8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	88fa      	ldrh	r2, [r7, #6]
 8001b90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb8:	d107      	bne.n	8001bca <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d007      	beq.n	8001be8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d162      	bne.n	8001cb6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001bf0:	e02e      	b.n	8001c50 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d115      	bne.n	8001c2c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f103 020c 	add.w	r2, r3, #12
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0c:	7812      	ldrb	r2, [r2, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c2a:	e011      	b.n	8001c50 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c2c:	f7fe ff2c 	bl	8000a88 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d803      	bhi.n	8001c44 <HAL_SPI_Receive+0x156>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c42:	d102      	bne.n	8001c4a <HAL_SPI_Receive+0x15c>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c4e:	e04a      	b.n	8001ce6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1cb      	bne.n	8001bf2 <HAL_SPI_Receive+0x104>
 8001c5a:	e031      	b.n	8001cc0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d113      	bne.n	8001c92 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	b292      	uxth	r2, r2
 8001c76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	1c9a      	adds	r2, r3, #2
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c90:	e011      	b.n	8001cb6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c92:	f7fe fef9 	bl	8000a88 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d803      	bhi.n	8001caa <HAL_SPI_Receive+0x1bc>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d102      	bne.n	8001cb0 <HAL_SPI_Receive+0x1c2>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cb4:	e017      	b.n	8001ce6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1cd      	bne.n	8001c5c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fa27 	bl	8002118 <SPI_EndRxTransaction>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	75fb      	strb	r3, [r7, #23]
 8001ce2:	e000      	b.n	8001ce6 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001ce4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x26>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e18a      	b.n	800203c <HAL_SPI_TransmitReceive+0x33c>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d2e:	f7fe feab 	bl	8000a88 <HAL_GetTick>
 8001d32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00f      	beq.n	8001d70 <HAL_SPI_TransmitReceive+0x70>
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d56:	d107      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x68>
 8001d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d003      	beq.n	8001d70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d6e:	e15b      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d005      	beq.n	8001d82 <HAL_SPI_TransmitReceive+0x82>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_SPI_TransmitReceive+0x82>
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d88:	e14e      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d003      	beq.n	8001d9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b40      	cmp	r3, #64	; 0x40
 8001de0:	d007      	beq.n	8001df2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dfa:	d178      	bne.n	8001eee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <HAL_SPI_TransmitReceive+0x10a>
 8001e04:	8b7b      	ldrh	r3, [r7, #26]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d166      	bne.n	8001ed8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	881a      	ldrh	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	1c9a      	adds	r2, r3, #2
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	3b01      	subs	r3, #1
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e2e:	e053      	b.n	8001ed8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d11b      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x176>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_SPI_TransmitReceive+0x176>
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d113      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	1c9a      	adds	r2, r3, #2
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d119      	bne.n	8001eb8 <HAL_SPI_TransmitReceive+0x1b8>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d014      	beq.n	8001eb8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	b292      	uxth	r2, r2
 8001e9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	1c9a      	adds	r2, r3, #2
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001eb8:	f7fe fde6 	bl	8000a88 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d807      	bhi.n	8001ed8 <HAL_SPI_TransmitReceive+0x1d8>
 8001ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ece:	d003      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ed6:	e0a7      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1a6      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x130>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1a1      	bne.n	8001e30 <HAL_SPI_TransmitReceive+0x130>
 8001eec:	e07c      	b.n	8001fe8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x1fc>
 8001ef6:	8b7b      	ldrh	r3, [r7, #26]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d16b      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	330c      	adds	r3, #12
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f22:	e057      	b.n	8001fd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d11c      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x26c>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d017      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x26c>
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d114      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	330c      	adds	r3, #12
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d119      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x2ae>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d014      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fae:	f7fe fd6b 	bl	8000a88 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d803      	bhi.n	8001fc6 <HAL_SPI_TransmitReceive+0x2c6>
 8001fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d102      	bne.n	8001fcc <HAL_SPI_TransmitReceive+0x2cc>
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fd2:	e029      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1a2      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x224>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d19d      	bne.n	8001f24 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f8e5 	bl	80021bc <SPI_EndRxTxTransaction>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002004:	e010      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	e000      	b.n	8002028 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800203c:	4618      	mov	r0, r3
 800203e:	3730      	adds	r7, #48	; 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002054:	e04c      	b.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d048      	beq.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800205e:	f7fe fd13 	bl	8000a88 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d902      	bls.n	8002074 <SPI_WaitFlagStateUntilTimeout+0x30>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d13d      	bne.n	80020f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002082:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208c:	d111      	bne.n	80020b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d004      	beq.n	80020a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a0:	d107      	bne.n	80020b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ba:	d10f      	bne.n	80020dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e00f      	b.n	8002110 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	429a      	cmp	r2, r3
 800210c:	d1a3      	bne.n	8002056 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800212c:	d111      	bne.n	8002152 <SPI_EndRxTransaction+0x3a>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002136:	d004      	beq.n	8002142 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d107      	bne.n	8002152 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002150:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800215a:	d117      	bne.n	800218c <SPI_EndRxTransaction+0x74>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002164:	d112      	bne.n	800218c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	2101      	movs	r1, #1
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff ff67 	bl	8002044 <SPI_WaitFlagStateUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01a      	beq.n	80021b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e013      	b.n	80021b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff ff54 	bl	8002044 <SPI_WaitFlagStateUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a6:	f043 0220 	orr.w	r2, r3, #32
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e000      	b.n	80021b4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2180      	movs	r1, #128	; 0x80
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff ff36 	bl	8002044 <SPI_WaitFlagStateUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0220 	orr.w	r2, r3, #32
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e000      	b.n	80021f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e03f      	b.n	800228a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 ff98 	bl	8003154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2224      	movs	r2, #36	; 0x24
 8002228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800223a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f90b 	bl	8002458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b088      	sub	sp, #32
 8002296:	af02      	add	r7, sp, #8
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	f040 8083 	bne.w	80023ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_UART_Transmit+0x2e>
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e07b      	b.n	80023bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Transmit+0x40>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e074      	b.n	80023bc <HAL_UART_Transmit+0x12a>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2221      	movs	r2, #33	; 0x21
 80022e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fbce 	bl	8000a88 <HAL_GetTick>
 80022ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	88fa      	ldrh	r2, [r7, #6]
 80022f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022fa:	e042      	b.n	8002382 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d122      	bne.n	800235a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f850 	bl	80023c4 <UART_WaitOnFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e046      	b.n	80023bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002340:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d103      	bne.n	8002352 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3302      	adds	r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e017      	b.n	8002382 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3301      	adds	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	e013      	b.n	8002382 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2200      	movs	r2, #0
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f82d 	bl	80023c4 <UART_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e023      	b.n	80023bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	60ba      	str	r2, [r7, #8]
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1b7      	bne.n	80022fc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2200      	movs	r2, #0
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f814 	bl	80023c4 <UART_WaitOnFlagUntilTimeout>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e00a      	b.n	80023bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
  }
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d4:	e02c      	b.n	8002430 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d028      	beq.n	8002430 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80023e4:	f7fe fb50 	bl	8000a88 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d21d      	bcs.n	8002430 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002402:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e00f      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	429a      	cmp	r2, r3
 800244c:	d0c3      	beq.n	80023d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002492:	f023 030c 	bic.w	r3, r3, #12
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	430b      	orrs	r3, r1
 800249e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a52      	ldr	r2, [pc, #328]	; (8002604 <UART_SetConfig+0x1ac>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d14e      	bne.n	800255e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024c0:	f7ff f94e 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 80024c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	009a      	lsls	r2, r3, #2
 80024d0:	441a      	add	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	4a4a      	ldr	r2, [pc, #296]	; (8002608 <UART_SetConfig+0x1b0>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	0119      	lsls	r1, r3, #4
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024fc:	4b42      	ldr	r3, [pc, #264]	; (8002608 <UART_SetConfig+0x1b0>)
 80024fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	fb00 f303 	mul.w	r3, r0, r3
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	3332      	adds	r3, #50	; 0x32
 8002510:	4a3d      	ldr	r2, [pc, #244]	; (8002608 <UART_SetConfig+0x1b0>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251c:	4419      	add	r1, r3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fbb2 f2f3 	udiv	r2, r2, r3
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <UART_SetConfig+0x1b0>)
 8002536:	fba3 0302 	umull	r0, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2064      	movs	r0, #100	; 0x64
 800253e:	fb00 f303 	mul.w	r3, r0, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	3332      	adds	r3, #50	; 0x32
 8002548:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <UART_SetConfig+0x1b0>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	440a      	add	r2, r1
 800255a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800255c:	e04d      	b.n	80025fa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800255e:	f7ff f8eb 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 8002562:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	009a      	lsls	r2, r3, #2
 800256e:	441a      	add	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4a23      	ldr	r2, [pc, #140]	; (8002608 <UART_SetConfig+0x1b0>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	0119      	lsls	r1, r3, #4
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	009a      	lsls	r2, r3, #2
 800258e:	441a      	add	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	fbb2 f2f3 	udiv	r2, r2, r3
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <UART_SetConfig+0x1b0>)
 800259c:	fba3 0302 	umull	r0, r3, r3, r2
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	2064      	movs	r0, #100	; 0x64
 80025a4:	fb00 f303 	mul.w	r3, r0, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	3332      	adds	r3, #50	; 0x32
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <UART_SetConfig+0x1b0>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ba:	4419      	add	r1, r3
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009a      	lsls	r2, r3, #2
 80025c6:	441a      	add	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <UART_SetConfig+0x1b0>)
 80025d4:	fba3 0302 	umull	r0, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	2064      	movs	r0, #100	; 0x64
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	3332      	adds	r3, #50	; 0x32
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <UART_SetConfig+0x1b0>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	095b      	lsrs	r3, r3, #5
 80025ee:	f003 020f 	and.w	r2, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	440a      	add	r2, r1
 80025f8:	609a      	str	r2, [r3, #8]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40013800 	.word	0x40013800
 8002608:	51eb851f 	.word	0x51eb851f

0800260c <BMP_Write8>:
 *  Created on: Oct 30, 2019
 *      Author: KamilB
 */
#include "bmp.h"

void BMP_Write8(uint8_t val, uint8_t reg){
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	460a      	mov	r2, r1
 8002616:	71fb      	strb	r3, [r7, #7]
 8002618:	4613      	mov	r3, r2
 800261a:	71bb      	strb	r3, [r7, #6]
	reg = reg & ~0x80;
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002622:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buf[] = {reg, val};
 8002624:	79bb      	ldrb	r3, [r7, #6]
 8002626:	733b      	strb	r3, [r7, #12]
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	2110      	movs	r1, #16
 8002630:	4809      	ldr	r0, [pc, #36]	; (8002658 <BMP_Write8+0x4c>)
 8002632:	f7fe fc93 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buf, 2, HAL_MAX_DELAY);
 8002636:	f107 010c 	add.w	r1, r7, #12
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	2202      	movs	r2, #2
 8002640:	4806      	ldr	r0, [pc, #24]	; (800265c <BMP_Write8+0x50>)
 8002642:	f7ff f920 	bl	8001886 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2110      	movs	r1, #16
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <BMP_Write8+0x4c>)
 800264c:	f7fe fc86 	bl	8000f5c <HAL_GPIO_WritePin>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40011000 	.word	0x40011000
 800265c:	20000060 	.word	0x20000060

08002660 <BMP_read8>:
uint8_t BMP_read8(uint8_t reg){
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	reg = reg |0x80;
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002670:	b2db      	uxtb	r3, r3
 8002672:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002674:	2200      	movs	r2, #0
 8002676:	2110      	movs	r1, #16
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <BMP_read8+0x50>)
 800267a:	f7fe fc6f 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 800267e:	1df9      	adds	r1, r7, #7
 8002680:	f04f 33ff 	mov.w	r3, #4294967295
 8002684:	2201      	movs	r2, #1
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <BMP_read8+0x54>)
 8002688:	f7ff f8fd 	bl	8001886 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &value, 1, HAL_MAX_DELAY);
 800268c:	f107 010f 	add.w	r1, r7, #15
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
 8002694:	2201      	movs	r2, #1
 8002696:	4807      	ldr	r0, [pc, #28]	; (80026b4 <BMP_read8+0x54>)
 8002698:	f7ff fa29 	bl	8001aee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800269c:	2201      	movs	r2, #1
 800269e:	2110      	movs	r1, #16
 80026a0:	4803      	ldr	r0, [pc, #12]	; (80026b0 <BMP_read8+0x50>)
 80026a2:	f7fe fc5b 	bl	8000f5c <HAL_GPIO_WritePin>
	return value;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40011000 	.word	0x40011000
 80026b4:	20000060 	.word	0x20000060

080026b8 <BMP_read16>:
uint16_t BMP_read16(uint8_t reg){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
	uint16_t value;
	uint8_t byte;
	reg = reg |0x80;
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2110      	movs	r1, #16
 80026d0:	4816      	ldr	r0, [pc, #88]	; (800272c <BMP_read16+0x74>)
 80026d2:	f7fe fc43 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80026d6:	1df9      	adds	r1, r7, #7
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	2201      	movs	r2, #1
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <BMP_read16+0x78>)
 80026e0:	f7ff f8d1 	bl	8001886 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80026e4:	f107 010d 	add.w	r1, r7, #13
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	2201      	movs	r2, #1
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <BMP_read16+0x78>)
 80026f0:	f7ff f9fd 	bl	8001aee <HAL_SPI_Receive>
	value = byte;
 80026f4:	7b7b      	ldrb	r3, [r7, #13]
 80026f6:	81fb      	strh	r3, [r7, #14]
	value <<= 8;
 80026f8:	89fb      	ldrh	r3, [r7, #14]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 80026fe:	f107 010d 	add.w	r1, r7, #13
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	2201      	movs	r2, #1
 8002708:	4809      	ldr	r0, [pc, #36]	; (8002730 <BMP_read16+0x78>)
 800270a:	f7ff f9f0 	bl	8001aee <HAL_SPI_Receive>
	value |= byte;
 800270e:	7b7b      	ldrb	r3, [r7, #13]
 8002710:	b29a      	uxth	r2, r3
 8002712:	89fb      	ldrh	r3, [r7, #14]
 8002714:	4313      	orrs	r3, r2
 8002716:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002718:	2201      	movs	r2, #1
 800271a:	2110      	movs	r1, #16
 800271c:	4803      	ldr	r0, [pc, #12]	; (800272c <BMP_read16+0x74>)
 800271e:	f7fe fc1d 	bl	8000f5c <HAL_GPIO_WritePin>
	return value;
 8002722:	89fb      	ldrh	r3, [r7, #14]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40011000 	.word	0x40011000
 8002730:	20000060 	.word	0x20000060

08002734 <BMP_read24>:
uint32_t BMP_read24(uint8_t reg){
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
	uint32_t value;
	uint8_t byte;
	reg = reg |0x80;
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002744:	b2db      	uxtb	r3, r3
 8002746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	2110      	movs	r1, #16
 800274c:	481e      	ldr	r0, [pc, #120]	; (80027c8 <BMP_read24+0x94>)
 800274e:	f7fe fc05 	bl	8000f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8002752:	1df9      	adds	r1, r7, #7
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	2201      	movs	r2, #1
 800275a:	481c      	ldr	r0, [pc, #112]	; (80027cc <BMP_read24+0x98>)
 800275c:	f7ff f893 	bl	8001886 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 8002760:	f107 010b 	add.w	r1, r7, #11
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	2201      	movs	r2, #1
 800276a:	4818      	ldr	r0, [pc, #96]	; (80027cc <BMP_read24+0x98>)
 800276c:	f7ff f9bf 	bl	8001aee <HAL_SPI_Receive>
	value = byte;
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800277a:	f107 010b 	add.w	r1, r7, #11
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	2201      	movs	r2, #1
 8002784:	4811      	ldr	r0, [pc, #68]	; (80027cc <BMP_read24+0x98>)
 8002786:	f7ff f9b2 	bl	8001aee <HAL_SPI_Receive>
	value |= byte;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
	value <<= 8;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	60fb      	str	r3, [r7, #12]
	HAL_SPI_Receive(&hspi1, &byte, 1, HAL_MAX_DELAY);
 800279a:	f107 010b 	add.w	r1, r7, #11
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	2201      	movs	r2, #1
 80027a4:	4809      	ldr	r0, [pc, #36]	; (80027cc <BMP_read24+0x98>)
 80027a6:	f7ff f9a2 	bl	8001aee <HAL_SPI_Receive>
	value |= byte;
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	461a      	mov	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80027b4:	2201      	movs	r2, #1
 80027b6:	2110      	movs	r1, #16
 80027b8:	4803      	ldr	r0, [pc, #12]	; (80027c8 <BMP_read24+0x94>)
 80027ba:	f7fe fbcf 	bl	8000f5c <HAL_GPIO_WritePin>
	return value;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40011000 	.word	0x40011000
 80027cc:	20000060 	.word	0x20000060

080027d0 <BMP_begin>:
bool BMP_begin(){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2110      	movs	r1, #16
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <BMP_begin+0x48>)
 80027da:	f7fe fbbf 	bl	8000f5c <HAL_GPIO_WritePin>
	BMP_Write8(MODE_SOFT_RESET_CODE, REGISTER_RESET);
 80027de:	21e0      	movs	r1, #224	; 0xe0
 80027e0:	20b6      	movs	r0, #182	; 0xb6
 80027e2:	f7ff ff13 	bl	800260c <BMP_Write8>
	HAL_Delay(500);
 80027e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ea:	f7fe f957 	bl	8000a9c <HAL_Delay>
	if(BMP_read8(REGISTER_CHIPID)!=	CHIPID){
 80027ee:	20d0      	movs	r0, #208	; 0xd0
 80027f0:	f7ff ff36 	bl	8002660 <BMP_read8>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b58      	cmp	r3, #88	; 0x58
 80027f8:	d006      	beq.n	8002808 <BMP_begin+0x38>
		HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2110      	movs	r1, #16
 80027fe:	4806      	ldr	r0, [pc, #24]	; (8002818 <BMP_begin+0x48>)
 8002800:	f7fe fbac 	bl	8000f5c <HAL_GPIO_WritePin>
			return false;
 8002804:	2300      	movs	r3, #0
 8002806:	e005      	b.n	8002814 <BMP_begin+0x44>
	}
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	2110      	movs	r1, #16
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <BMP_begin+0x48>)
 800280e:	f7fe fba5 	bl	8000f5c <HAL_GPIO_WritePin>
	return true;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40011000 	.word	0x40011000

0800281c <BMP_sample>:
void BMP_sample(){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
	/*filer and standby set */
	uint8_t config_value=0x04, control_value=0x02;
 8002822:	2304      	movs	r3, #4
 8002824:	71fb      	strb	r3, [r7, #7]
 8002826:	2302      	movs	r3, #2
 8002828:	71bb      	strb	r3, [r7, #6]
	config_value <<=5;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	015b      	lsls	r3, r3, #5
 800282e:	71fb      	strb	r3, [r7, #7]
	config_value += (0x04<<2);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	3310      	adds	r3, #16
 8002834:	71fb      	strb	r3, [r7, #7]
	BMP_Write8(config_value, REGISTER_CONFIG);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	21f5      	movs	r1, #245	; 0xf5
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fee6 	bl	800260c <BMP_Write8>
	/* osrs_t osrs_p and mode config */
	control_value <<= 5;
 8002840:	79bb      	ldrb	r3, [r7, #6]
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	71bb      	strb	r3, [r7, #6]
	control_value += (0x05<<2);
 8002846:	79bb      	ldrb	r3, [r7, #6]
 8002848:	3314      	adds	r3, #20
 800284a:	71bb      	strb	r3, [r7, #6]
	control_value += 0x03;
 800284c:	79bb      	ldrb	r3, [r7, #6]
 800284e:	3303      	adds	r3, #3
 8002850:	71bb      	strb	r3, [r7, #6]
	BMP_Write8(control_value, REGISTER_CONTROL);
 8002852:	79bb      	ldrb	r3, [r7, #6]
 8002854:	21f4      	movs	r1, #244	; 0xf4
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fed8 	bl	800260c <BMP_Write8>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <BMP_read16_LE>:
uint16_t BMP_read16_LE(uint8_t reg){
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	uint16_t temp = BMP_read16(reg);
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff21 	bl	80026b8 <BMP_read16>
 8002876:	4603      	mov	r3, r0
 8002878:	81fb      	strh	r3, [r7, #14]
	return (temp>>8)|(temp<<8);
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b29b      	uxth	r3, r3
 8002880:	b21a      	sxth	r2, r3
 8002882:	89fb      	ldrh	r3, [r7, #14]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	b21b      	sxth	r3, r3
 8002888:	4313      	orrs	r3, r2
 800288a:	b21b      	sxth	r3, r3
 800288c:	b29b      	uxth	r3, r3
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <BMP_readS16_LE>:
int16_t BMP_readS16_LE(uint8_t reg){
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	71fb      	strb	r3, [r7, #7]
	int16_t temp = BMP_read16_LE(reg);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ffde 	bl	8002864 <BMP_read16_LE>
 80028a8:	4603      	mov	r3, r0
 80028aa:	81fb      	strh	r3, [r7, #14]
	return temp;
 80028ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <BMP_read_coefficients>:
void BMP_read_coefficients(){
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	calib_data[0] = BMP_read16_LE(REGISTER_DIG_T1);
 80028bc:	2088      	movs	r0, #136	; 0x88
 80028be:	f7ff ffd1 	bl	8002864 <BMP_read16_LE>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b28      	ldr	r3, [pc, #160]	; (8002968 <BMP_read_coefficients+0xb0>)
 80028c8:	601a      	str	r2, [r3, #0]
	calib_data[1] = BMP_readS16_LE(REGISTER_DIG_T2);
 80028ca:	208a      	movs	r0, #138	; 0x8a
 80028cc:	f7ff ffe3 	bl	8002896 <BMP_readS16_LE>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <BMP_read_coefficients+0xb0>)
 80028d6:	605a      	str	r2, [r3, #4]
	calib_data[2] = BMP_readS16_LE(REGISTER_DIG_T3);
 80028d8:	208c      	movs	r0, #140	; 0x8c
 80028da:	f7ff ffdc 	bl	8002896 <BMP_readS16_LE>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <BMP_read_coefficients+0xb0>)
 80028e4:	609a      	str	r2, [r3, #8]

	calib_data[3] = BMP_read16_LE(REGISTER_DIG_P1);
 80028e6:	208e      	movs	r0, #142	; 0x8e
 80028e8:	f7ff ffbc 	bl	8002864 <BMP_read16_LE>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <BMP_read_coefficients+0xb0>)
 80028f2:	60da      	str	r2, [r3, #12]
	calib_data[4] = BMP_readS16_LE(REGISTER_DIG_P2);
 80028f4:	2090      	movs	r0, #144	; 0x90
 80028f6:	f7ff ffce 	bl	8002896 <BMP_readS16_LE>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <BMP_read_coefficients+0xb0>)
 8002900:	611a      	str	r2, [r3, #16]
	calib_data[5] = BMP_readS16_LE(REGISTER_DIG_P3);
 8002902:	2092      	movs	r0, #146	; 0x92
 8002904:	f7ff ffc7 	bl	8002896 <BMP_readS16_LE>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <BMP_read_coefficients+0xb0>)
 800290e:	615a      	str	r2, [r3, #20]
	calib_data[6] = BMP_readS16_LE(REGISTER_DIG_P4);
 8002910:	2094      	movs	r0, #148	; 0x94
 8002912:	f7ff ffc0 	bl	8002896 <BMP_readS16_LE>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <BMP_read_coefficients+0xb0>)
 800291c:	619a      	str	r2, [r3, #24]
	calib_data[7] = BMP_readS16_LE(REGISTER_DIG_P5);
 800291e:	2096      	movs	r0, #150	; 0x96
 8002920:	f7ff ffb9 	bl	8002896 <BMP_readS16_LE>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <BMP_read_coefficients+0xb0>)
 800292a:	61da      	str	r2, [r3, #28]
	calib_data[8] = BMP_readS16_LE(REGISTER_DIG_P6);
 800292c:	2098      	movs	r0, #152	; 0x98
 800292e:	f7ff ffb2 	bl	8002896 <BMP_readS16_LE>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <BMP_read_coefficients+0xb0>)
 8002938:	621a      	str	r2, [r3, #32]
	calib_data[9] = BMP_readS16_LE(REGISTER_DIG_P7);
 800293a:	209a      	movs	r0, #154	; 0x9a
 800293c:	f7ff ffab 	bl	8002896 <BMP_readS16_LE>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <BMP_read_coefficients+0xb0>)
 8002946:	625a      	str	r2, [r3, #36]	; 0x24
	calib_data[10] = BMP_readS16_LE(REGISTER_DIG_P8);
 8002948:	209c      	movs	r0, #156	; 0x9c
 800294a:	f7ff ffa4 	bl	8002896 <BMP_readS16_LE>
 800294e:	4603      	mov	r3, r0
 8002950:	461a      	mov	r2, r3
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <BMP_read_coefficients+0xb0>)
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
	calib_data[11] = BMP_readS16_LE(REGISTER_DIG_P9);
 8002956:	209e      	movs	r0, #158	; 0x9e
 8002958:	f7ff ff9d 	bl	8002896 <BMP_readS16_LE>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b01      	ldr	r3, [pc, #4]	; (8002968 <BMP_read_coefficients+0xb0>)
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000002c 	.word	0x2000002c

0800296c <BMP_read_temp>:
int BMP_read_temp(){
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0

	int var1, var2;
	int adc_t = BMP_read24(REGISTER_TEMPDATA);
 8002972:	20fa      	movs	r0, #250	; 0xfa
 8002974:	f7ff fede 	bl	8002734 <BMP_read24>
 8002978:	4603      	mov	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]
	adc_t >>= 4;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	111b      	asrs	r3, r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
	var1 =((((adc_t>>3)-((int32_t)calib_data[0]<<1)))*((int32_t)calib_data[1])) >>11;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	10da      	asrs	r2, r3, #3
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <BMP_read_temp+0x90>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <BMP_read_temp+0x90>)
 8002990:	6852      	ldr	r2, [r2, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	12db      	asrs	r3, r3, #11
 8002998:	60bb      	str	r3, [r7, #8]
	var2 = (((((adc_t >> 4) - ((int32_t)calib_data[0])) *
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	111a      	asrs	r2, r3, #4
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <BMP_read_temp+0x90>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
	            ((adc_t >> 4) - ((int32_t)calib_data[0]))) >>
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	1111      	asrs	r1, r2, #4
 80029a8:	4a14      	ldr	r2, [pc, #80]	; (80029fc <BMP_read_temp+0x90>)
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	1a8a      	subs	r2, r1, r2
	var2 = (((((adc_t >> 4) - ((int32_t)calib_data[0])) *
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
	            ((adc_t >> 4) - ((int32_t)calib_data[0]))) >>
 80029b2:	131b      	asrs	r3, r3, #12
	           12) *
	          ((int32_t)calib_data[2])) >>
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <BMP_read_temp+0x90>)
 80029b6:	6892      	ldr	r2, [r2, #8]
	           12) *
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_t >> 4) - ((int32_t)calib_data[0])) *
 80029bc:	139b      	asrs	r3, r3, #14
 80029be:	607b      	str	r3, [r7, #4]
	         14;

	  t_fine = var1 + var2;
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <BMP_read_temp+0x94>)
 80029c8:	6013      	str	r3, [r2, #0]

	  float T = (t_fine * 5 + 128) >> 8;
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <BMP_read_temp+0x94>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3380      	adds	r3, #128	; 0x80
 80029d6:	121b      	asrs	r3, r3, #8
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fc79 	bl	80002d0 <__aeabi_i2f>
 80029de:	4603      	mov	r3, r0
 80029e0:	603b      	str	r3, [r7, #0]
	  return T/100;
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <BMP_read_temp+0x98>)
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	f7fd fd7b 	bl	80004e0 <__aeabi_fdiv>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fe13 	bl	8000618 <__aeabi_f2iz>
 80029f2:	4603      	mov	r3, r0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000002c 	.word	0x2000002c
 8002a00:	2000005c 	.word	0x2000005c
 8002a04:	42c80000 	.word	0x42c80000

08002a08 <BMP_read_press>:
int BMP_read_press(){
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	b08b      	sub	sp, #44	; 0x2c
 8002a0e:	af00      	add	r7, sp, #0
	int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  BMP_read_temp();
 8002a10:	f7ff ffac 	bl	800296c <BMP_read_temp>

	  int32_t adc_P = BMP_read24(REGISTER_PRESSDATA);
 8002a14:	20f7      	movs	r0, #247	; 0xf7
 8002a16:	f7ff fe8d 	bl	8002734 <BMP_read24>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
	  adc_P >>= 4;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	111b      	asrs	r3, r3, #4
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

	  var1 = ((int64_t)t_fine) - 128000;
 8002a24:	4b63      	ldr	r3, [pc, #396]	; (8002bb4 <BMP_read_press+0x1ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002a2e:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8002a32:	f142 34ff 	adc.w	r4, r2, #4294967295
 8002a36:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)calib_data[8];
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	fb02 f203 	mul.w	r2, r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	69b9      	ldr	r1, [r7, #24]
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	441a      	add	r2, r3
 8002a4c:	69b9      	ldr	r1, [r7, #24]
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	fba1 3403 	umull	r3, r4, r1, r3
 8002a54:	4422      	add	r2, r4
 8002a56:	4614      	mov	r4, r2
 8002a58:	4a57      	ldr	r2, [pc, #348]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002a5a:	6a12      	ldr	r2, [r2, #32]
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002a62:	fb01 f504 	mul.w	r5, r1, r4
 8002a66:	fb03 f002 	mul.w	r0, r3, r2
 8002a6a:	4428      	add	r0, r5
 8002a6c:	fba3 3401 	umull	r3, r4, r3, r1
 8002a70:	1902      	adds	r2, r0, r4
 8002a72:	4614      	mov	r4, r2
 8002a74:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8002a78:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1 * (int64_t)calib_data[7]) << 17);
 8002a7c:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	fb04 f102 	mul.w	r1, r4, r2
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	fb03 f202 	mul.w	r2, r3, r2
 8002a90:	1888      	adds	r0, r1, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	fba2 1203 	umull	r1, r2, r2, r3
 8002a98:	1883      	adds	r3, r0, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f04f 0500 	mov.w	r5, #0
 8002aa0:	f04f 0600 	mov.w	r6, #0
 8002aa4:	0456      	lsls	r6, r2, #17
 8002aa6:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002aaa:	044d      	lsls	r5, r1, #17
 8002aac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ab0:	186b      	adds	r3, r5, r1
 8002ab2:	eb46 0402 	adc.w	r4, r6, r2
 8002ab6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)calib_data[6]) << 35);
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002ac4:	f04f 0500 	mov.w	r5, #0
 8002ac8:	f04f 0600 	mov.w	r6, #0
 8002acc:	00ce      	lsls	r6, r1, #3
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ad4:	186b      	adds	r3, r5, r1
 8002ad6:	eb46 0402 	adc.w	r4, r6, r2
 8002ada:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)calib_data[5]) >> 8) +
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	fb02 f203 	mul.w	r2, r2, r3
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	441a      	add	r2, r3
 8002af0:	69b9      	ldr	r1, [r7, #24]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	fba1 3403 	umull	r3, r4, r1, r3
 8002af8:	4422      	add	r2, r4
 8002afa:	4614      	mov	r4, r2
 8002afc:	4a2e      	ldr	r2, [pc, #184]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002afe:	6952      	ldr	r2, [r2, #20]
 8002b00:	4611      	mov	r1, r2
 8002b02:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002b06:	fb01 f504 	mul.w	r5, r1, r4
 8002b0a:	fb03 f002 	mul.w	r0, r3, r2
 8002b0e:	4428      	add	r0, r5
 8002b10:	fba3 3401 	umull	r3, r4, r3, r1
 8002b14:	1902      	adds	r2, r0, r4
 8002b16:	4614      	mov	r4, r2
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	0a19      	lsrs	r1, r3, #8
 8002b22:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002b26:	1222      	asrs	r2, r4, #8
	         ((var1 * (int64_t)calib_data[4]) << 12);
 8002b28:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002b30:	69b8      	ldr	r0, [r7, #24]
 8002b32:	fb04 f500 	mul.w	r5, r4, r0
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	fb03 f000 	mul.w	r0, r3, r0
 8002b3c:	4428      	add	r0, r5
 8002b3e:	69bd      	ldr	r5, [r7, #24]
 8002b40:	fba5 5603 	umull	r5, r6, r5, r3
 8002b44:	1983      	adds	r3, r0, r6
 8002b46:	461e      	mov	r6, r3
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	e9c7 3400 	strd	r3, r4, [r7]
 8002b54:	0333      	lsls	r3, r6, #12
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	ea43 5315 	orr.w	r3, r3, r5, lsr #20
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	032b      	lsls	r3, r5, #12
 8002b62:	603b      	str	r3, [r7, #0]
	  var1 = ((var1 * var1 * (int64_t)calib_data[5]) >> 8) +
 8002b64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b68:	185b      	adds	r3, r3, r1
 8002b6a:	eb44 0402 	adc.w	r4, r4, r2
 8002b6e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 =
	      (((((int64_t)1) << 47) + var1)) * ((int64_t)calib_data[3]) >> 33;
 8002b72:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002b76:	1c19      	adds	r1, r3, #0
 8002b78:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <BMP_read_press+0x1b0>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002b84:	fb03 f502 	mul.w	r5, r3, r2
 8002b88:	fb01 f004 	mul.w	r0, r1, r4
 8002b8c:	4428      	add	r0, r5
 8002b8e:	fba1 3403 	umull	r3, r4, r1, r3
 8002b92:	1902      	adds	r2, r0, r4
 8002b94:	4614      	mov	r4, r2
	  var1 =
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	1061      	asrs	r1, r4, #1
 8002ba0:	17e2      	asrs	r2, r4, #31
 8002ba2:	e9c7 1206 	strd	r1, r2, [r7, #24]

	  if (var1 == 0) {
 8002ba6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002baa:	4323      	orrs	r3, r4
 8002bac:	d106      	bne.n	8002bbc <BMP_read_press+0x1b4>
	    return 0; // avoid exception caused by division by zero
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e0df      	b.n	8002d72 <BMP_read_press+0x36a>
 8002bb2:	bf00      	nop
 8002bb4:	2000005c 	.word	0x2000005c
 8002bb8:	2000002c 	.word	0x2000002c
	  }
	  p = 1048576 - adc_P;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002bc2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002bc6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p << 31) - var2) * 3125) / var1;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	ea4f 0b63 	mov.w	fp, r3, asr #1
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	ea4f 7ac3 	mov.w	sl, r3, lsl #31
 8002bd6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002bda:	4655      	mov	r5, sl
 8002bdc:	465e      	mov	r6, fp
 8002bde:	1aed      	subs	r5, r5, r3
 8002be0:	eb66 0604 	sbc.w	r6, r6, r4
 8002be4:	46aa      	mov	sl, r5
 8002be6:	46b3      	mov	fp, r6
 8002be8:	eb1a 030a 	adds.w	r3, sl, sl
 8002bec:	eb4b 040b 	adc.w	r4, fp, fp
 8002bf0:	469a      	mov	sl, r3
 8002bf2:	46a3      	mov	fp, r4
 8002bf4:	eb1a 0a05 	adds.w	sl, sl, r5
 8002bf8:	eb4b 0b06 	adc.w	fp, fp, r6
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	ea4f 128b 	mov.w	r2, fp, lsl #6
 8002c08:	ea42 629a 	orr.w	r2, r2, sl, lsr #26
 8002c0c:	ea4f 118a 	mov.w	r1, sl, lsl #6
 8002c10:	eb1a 0a01 	adds.w	sl, sl, r1
 8002c14:	eb4b 0b02 	adc.w	fp, fp, r2
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8002c24:	ea42 729a 	orr.w	r2, r2, sl, lsr #30
 8002c28:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8002c2c:	468a      	mov	sl, r1
 8002c2e:	4693      	mov	fp, r2
 8002c30:	eb1a 0a05 	adds.w	sl, sl, r5
 8002c34:	eb4b 0b06 	adc.w	fp, fp, r6
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8002c44:	ea42 729a 	orr.w	r2, r2, sl, lsr #30
 8002c48:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8002c4c:	468a      	mov	sl, r1
 8002c4e:	4693      	mov	fp, r2
 8002c50:	eb1a 0005 	adds.w	r0, sl, r5
 8002c54:	eb4b 0106 	adc.w	r1, fp, r6
 8002c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c5c:	f7fd fd02 	bl	8000664 <__aeabi_ldivmod>
 8002c60:	4603      	mov	r3, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)calib_data[11]) * (p >> 13) * (p >> 13)) >> 25;
 8002c68:	4b44      	ldr	r3, [pc, #272]	; (8002d7c <BMP_read_press+0x374>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002c72:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	0b6b      	lsrs	r3, r5, #13
 8002c80:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002c84:	1374      	asrs	r4, r6, #13
 8002c86:	fb03 f502 	mul.w	r5, r3, r2
 8002c8a:	fb01 f004 	mul.w	r0, r1, r4
 8002c8e:	4428      	add	r0, r5
 8002c90:	fba1 1203 	umull	r1, r2, r1, r3
 8002c94:	1883      	adds	r3, r0, r2
 8002c96:	461a      	mov	r2, r3
 8002c98:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f04f 0400 	mov.w	r4, #0
 8002ca4:	0b6b      	lsrs	r3, r5, #13
 8002ca6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002caa:	1374      	asrs	r4, r6, #13
 8002cac:	fb03 f502 	mul.w	r5, r3, r2
 8002cb0:	fb01 f004 	mul.w	r0, r1, r4
 8002cb4:	4428      	add	r0, r5
 8002cb6:	fba1 1203 	umull	r1, r2, r1, r3
 8002cba:	1883      	adds	r3, r0, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	f04f 0400 	mov.w	r4, #0
 8002cc6:	0e4b      	lsrs	r3, r1, #25
 8002cc8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002ccc:	1654      	asrs	r4, r2, #25
 8002cce:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)calib_data[10]) * p) >> 19;
 8002cd2:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <BMP_read_press+0x374>)
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	fb04 f102 	mul.w	r1, r4, r2
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	fb03 f202 	mul.w	r2, r3, r2
 8002ce6:	1888      	adds	r0, r1, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	fba2 1203 	umull	r1, r2, r2, r3
 8002cee:	1883      	adds	r3, r0, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	0ccb      	lsrs	r3, r1, #19
 8002cfc:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002d00:	14d4      	asrs	r4, r2, #19
 8002d02:	e9c7 3404 	strd	r3, r4, [r7, #16]

	  p = ((p + var1 + var2) >> 8) + (((int64_t)calib_data[9]) << 4);
 8002d06:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002d0a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002d0e:	18cd      	adds	r5, r1, r3
 8002d10:	eb42 0604 	adc.w	r6, r2, r4
 8002d14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002d18:	18e9      	adds	r1, r5, r3
 8002d1a:	eb46 0204 	adc.w	r2, r6, r4
 8002d1e:	f04f 0500 	mov.w	r5, #0
 8002d22:	f04f 0600 	mov.w	r6, #0
 8002d26:	0a0d      	lsrs	r5, r1, #8
 8002d28:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8002d2c:	1216      	asrs	r6, r2, #8
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <BMP_read_press+0x374>)
 8002d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d32:	4611      	mov	r1, r2
 8002d34:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002d38:	ea4f 7921 	mov.w	r9, r1, asr #28
 8002d3c:	ea4f 1801 	mov.w	r8, r1, lsl #4
 8002d40:	eb15 0308 	adds.w	r3, r5, r8
 8002d44:	eb46 0409 	adc.w	r4, r6, r9
 8002d48:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return p / 256;
 8002d4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f174 0200 	sbcs.w	r2, r4, #0
 8002d56:	da02      	bge.n	8002d5e <BMP_read_press+0x356>
 8002d58:	33ff      	adds	r3, #255	; 0xff
 8002d5a:	f144 0400 	adc.w	r4, r4, #0
 8002d5e:	f04f 0100 	mov.w	r1, #0
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	0a19      	lsrs	r1, r3, #8
 8002d68:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002d6c:	1222      	asrs	r2, r4, #8
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4614      	mov	r4, r2
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	372c      	adds	r7, #44	; 0x2c
 8002d76:	46bd      	mov	sp, r7
 8002d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d7c:	2000002c 	.word	0x2000002c

08002d80 <send_uart>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_uart(char *s){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2,  (uint8_t*)s, strlen(s), 1000);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fd f9df 	bl	800014c <strlen>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4803      	ldr	r0, [pc, #12]	; (8002da8 <send_uart+0x28>)
 8002d9a:	f7ff fa7a 	bl	8002292 <HAL_UART_Transmit>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	200000b8 	.word	0x200000b8

08002dac <clear_buffer>:
void clear_buffer(char *s){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	for(int i=0;i<strlen(s);i++){
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e007      	b.n	8002dca <clear_buffer+0x1e>
		s[i] = ' ';
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<strlen(s);i++){
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd f9be 	bl	800014c <strlen>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f0      	bhi.n	8002dba <clear_buffer+0xe>
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b092      	sub	sp, #72	; 0x48
 8002de4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002de6:	f7fd fdf7 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dea:	f000 f851 	bl	8002e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dee:	f000 f8f1 	bl	8002fd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002df2:	f000 f88f 	bl	8002f14 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002df6:	f000 f8c3 	bl	8002f80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(BMP_begin()){
 8002dfa:	f7ff fce9 	bl	80027d0 <BMP_begin>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <main+0x2c>
	  send_uart("Udalo sie\r\n");
 8002e04:	481d      	ldr	r0, [pc, #116]	; (8002e7c <main+0x9c>)
 8002e06:	f7ff ffbb 	bl	8002d80 <send_uart>
 8002e0a:	e002      	b.n	8002e12 <main+0x32>
  }else{
	  send_uart("Udalo sie nie\r\n");
 8002e0c:	481c      	ldr	r0, [pc, #112]	; (8002e80 <main+0xa0>)
 8002e0e:	f7ff ffb7 	bl	8002d80 <send_uart>
  }
  BMP_read_coefficients();
 8002e12:	f7ff fd51 	bl	80028b8 <BMP_read_coefficients>
  BMP_sample();
 8002e16:	f7ff fd01 	bl	800281c <BMP_sample>
  send_uart("START\r\n");
 8002e1a:	481a      	ldr	r0, [pc, #104]	; (8002e84 <main+0xa4>)
 8002e1c:	f7ff ffb0 	bl	8002d80 <send_uart>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  temp = BMP_read_temp();
 8002e20:	f7ff fda4 	bl	800296c <BMP_read_temp>
 8002e24:	6478      	str	r0, [r7, #68]	; 0x44
	  press = BMP_read_press();
 8002e26:	f7ff fdef 	bl	8002a08 <BMP_read_press>
 8002e2a:	6438      	str	r0, [r7, #64]	; 0x40
	  	  	  itoa(temp, &buffer, 10);
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	220a      	movs	r2, #10
 8002e30:	4619      	mov	r1, r3
 8002e32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e34:	f000 fa98 	bl	8003368 <itoa>

	  	  	  send_uart(buffer);
 8002e38:	463b      	mov	r3, r7
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ffa0 	bl	8002d80 <send_uart>
	  	  	  send_uart(" *C\r\n");
 8002e40:	4811      	ldr	r0, [pc, #68]	; (8002e88 <main+0xa8>)
 8002e42:	f7ff ff9d 	bl	8002d80 <send_uart>
	  	  	clear_buffer(buffer);
 8002e46:	463b      	mov	r3, r7
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ffaf 	bl	8002dac <clear_buffer>
	  	  itoa(press, &buffer, 10);
 8002e4e:	463b      	mov	r3, r7
 8002e50:	220a      	movs	r2, #10
 8002e52:	4619      	mov	r1, r3
 8002e54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002e56:	f000 fa87 	bl	8003368 <itoa>
	  	send_uart(buffer);
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff8f 	bl	8002d80 <send_uart>
	  	send_uart(" Pa\r\n");
 8002e62:	480a      	ldr	r0, [pc, #40]	; (8002e8c <main+0xac>)
 8002e64:	f7ff ff8c 	bl	8002d80 <send_uart>
	  	  	  HAL_Delay(1000);
 8002e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e6c:	f7fd fe16 	bl	8000a9c <HAL_Delay>
	  	  	clear_buffer(buffer);
 8002e70:	463b      	mov	r3, r7
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff9a 	bl	8002dac <clear_buffer>
  {
 8002e78:	e7d2      	b.n	8002e20 <main+0x40>
 8002e7a:	bf00      	nop
 8002e7c:	08003424 	.word	0x08003424
 8002e80:	08003430 	.word	0x08003430
 8002e84:	08003440 	.word	0x08003440
 8002e88:	08003448 	.word	0x08003448
 8002e8c:	08003450 	.word	0x08003450

08002e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	; 0x40
 8002e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e96:	f107 0318 	add.w	r3, r7, #24
 8002e9a:	2228      	movs	r2, #40	; 0x28
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fa64 	bl	800336c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eba:	2310      	movs	r3, #16
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002ec6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f85b 	bl	8000f8c <HAL_RCC_OscConfig>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002edc:	f000 f8b8 	bl	8003050 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	2102      	movs	r1, #2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fac6 	bl	800148c <HAL_RCC_ClockConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002f06:	f000 f8a3 	bl	8003050 <Error_Handler>
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	3740      	adds	r7, #64	; 0x40
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f1a:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <MX_SPI1_Init+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f60:	220a      	movs	r2, #10
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f64:	4804      	ldr	r0, [pc, #16]	; (8002f78 <MX_SPI1_Init+0x64>)
 8002f66:	f7fe fc2d 	bl	80017c4 <HAL_SPI_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f70:	f000 f86e 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000060 	.word	0x20000060
 8002f7c:	40013000 	.word	0x40013000

08002f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_USART2_UART_Init+0x50>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb8:	f7ff f91e 	bl	80021f8 <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fc2:	f000 f845 	bl	8003050 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200000b8 	.word	0x200000b8
 8002fd0:	40004400 	.word	0x40004400

08002fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MX_GPIO_Init+0x74>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <MX_GPIO_Init+0x74>)
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	6193      	str	r3, [r2, #24]
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MX_GPIO_Init+0x74>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MX_GPIO_Init+0x74>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <MX_GPIO_Init+0x74>)
 8003006:	f043 0310 	orr.w	r3, r3, #16
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <MX_GPIO_Init+0x74>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	2110      	movs	r1, #16
 800301c:	480b      	ldr	r0, [pc, #44]	; (800304c <MX_GPIO_Init+0x78>)
 800301e:	f7fd ff9d 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003022:	2310      	movs	r3, #16
 8003024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003026:	2301      	movs	r3, #1
 8003028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302e:	2302      	movs	r3, #2
 8003030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	4619      	mov	r1, r3
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <MX_GPIO_Init+0x78>)
 800303a:	f7fd fe35 	bl	8000ca8 <HAL_GPIO_Init>

}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	40011000 	.word	0x40011000

08003050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr

0800305c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_MspInit+0x5c>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_MspInit+0x5c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6193      	str	r3, [r2, #24]
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_MspInit+0x5c>)
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_MspInit+0x5c>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_MspInit+0x5c>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	61d3      	str	r3, [r2, #28]
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_MspInit+0x5c>)
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <HAL_MspInit+0x60>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_MspInit+0x60>)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000

080030c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_SPI_MspInit+0x88>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d12f      	bne.n	8003140 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e0:	4b1a      	ldr	r3, [pc, #104]	; (800314c <HAL_SPI_MspInit+0x8c>)
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_SPI_MspInit+0x8c>)
 80030e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ea:	6193      	str	r3, [r2, #24]
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_SPI_MspInit+0x8c>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_SPI_MspInit+0x8c>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <HAL_SPI_MspInit+0x8c>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6193      	str	r3, [r2, #24]
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_SPI_MspInit+0x8c>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003110:	23a0      	movs	r3, #160	; 0xa0
 8003112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311c:	f107 0310 	add.w	r3, r7, #16
 8003120:	4619      	mov	r1, r3
 8003122:	480b      	ldr	r0, [pc, #44]	; (8003150 <HAL_SPI_MspInit+0x90>)
 8003124:	f7fd fdc0 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003128:	2340      	movs	r3, #64	; 0x40
 800312a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_SPI_MspInit+0x90>)
 800313c:	f7fd fdb4 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40013000 	.word	0x40013000
 800314c:	40021000 	.word	0x40021000
 8003150:	40010800 	.word	0x40010800

08003154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800315c:	f107 0310 	add.w	r3, r7, #16
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <HAL_UART_MspInit+0x88>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d12f      	bne.n	80031d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4a19      	ldr	r2, [pc, #100]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 800317a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317e:	61d3      	str	r3, [r2, #28]
 8003180:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	6193      	str	r3, [r2, #24]
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <HAL_UART_MspInit+0x8c>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031a4:	2304      	movs	r3, #4
 80031a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a8:	2302      	movs	r3, #2
 80031aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4619      	mov	r1, r3
 80031b6:	480b      	ldr	r0, [pc, #44]	; (80031e4 <HAL_UART_MspInit+0x90>)
 80031b8:	f7fd fd76 	bl	8000ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031bc:	2308      	movs	r3, #8
 80031be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0310 	add.w	r3, r7, #16
 80031cc:	4619      	mov	r1, r3
 80031ce:	4805      	ldr	r0, [pc, #20]	; (80031e4 <HAL_UART_MspInit+0x90>)
 80031d0:	f7fd fd6a 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031d4:	bf00      	nop
 80031d6:	3720      	adds	r7, #32
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40004400 	.word	0x40004400
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010800 	.word	0x40010800

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <HardFault_Handler+0x4>

080031fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <MemManage_Handler+0x4>

08003200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <BusFault_Handler+0x4>

08003206 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <UsageFault_Handler+0x4>

0800320c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003234:	f7fd fc16 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}

0800323c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <SystemInit+0x5c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <SystemInit+0x5c>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <SystemInit+0x5c>)
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4911      	ldr	r1, [pc, #68]	; (8003298 <SystemInit+0x5c>)
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <SystemInit+0x60>)
 8003254:	4013      	ands	r3, r2
 8003256:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <SystemInit+0x5c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <SystemInit+0x5c>)
 800325e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003266:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <SystemInit+0x5c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <SystemInit+0x5c>)
 800326e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <SystemInit+0x5c>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <SystemInit+0x5c>)
 800327a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800327e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <SystemInit+0x5c>)
 8003282:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003286:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <SystemInit+0x64>)
 800328a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800328e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	40021000 	.word	0x40021000
 800329c:	f8ff0000 	.word	0xf8ff0000
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80032a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80032a6:	e003      	b.n	80032b0 <LoopCopyDataInit>

080032a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80032aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80032ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80032ae:	3104      	adds	r1, #4

080032b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80032b0:	480a      	ldr	r0, [pc, #40]	; (80032dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80032b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80032b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80032b8:	d3f6      	bcc.n	80032a8 <CopyDataInit>
  ldr r2, =_sbss
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80032bc:	e002      	b.n	80032c4 <LoopFillZerobss>

080032be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80032c0:	f842 3b04 	str.w	r3, [r2], #4

080032c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80032c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80032c8:	d3f9      	bcc.n	80032be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032ca:	f7ff ffb7 	bl	800323c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ce:	f000 f80f 	bl	80032f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032d2:	f7ff fd85 	bl	8002de0 <main>
  bx lr
 80032d6:	4770      	bx	lr
  ldr r3, =_sidata
 80032d8:	080034a8 	.word	0x080034a8
  ldr r0, =_sdata
 80032dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80032e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80032e4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80032e8:	200000f8 	.word	0x200000f8

080032ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032ec:	e7fe      	b.n	80032ec <ADC1_2_IRQHandler>
	...

080032f0 <__libc_init_array>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	2500      	movs	r5, #0
 80032f4:	4e0c      	ldr	r6, [pc, #48]	; (8003328 <__libc_init_array+0x38>)
 80032f6:	4c0d      	ldr	r4, [pc, #52]	; (800332c <__libc_init_array+0x3c>)
 80032f8:	1ba4      	subs	r4, r4, r6
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	42a5      	cmp	r5, r4
 80032fe:	d109      	bne.n	8003314 <__libc_init_array+0x24>
 8003300:	f000 f87a 	bl	80033f8 <_init>
 8003304:	2500      	movs	r5, #0
 8003306:	4e0a      	ldr	r6, [pc, #40]	; (8003330 <__libc_init_array+0x40>)
 8003308:	4c0a      	ldr	r4, [pc, #40]	; (8003334 <__libc_init_array+0x44>)
 800330a:	1ba4      	subs	r4, r4, r6
 800330c:	10a4      	asrs	r4, r4, #2
 800330e:	42a5      	cmp	r5, r4
 8003310:	d105      	bne.n	800331e <__libc_init_array+0x2e>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003318:	4798      	blx	r3
 800331a:	3501      	adds	r5, #1
 800331c:	e7ee      	b.n	80032fc <__libc_init_array+0xc>
 800331e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003322:	4798      	blx	r3
 8003324:	3501      	adds	r5, #1
 8003326:	e7f2      	b.n	800330e <__libc_init_array+0x1e>
 8003328:	080034a0 	.word	0x080034a0
 800332c:	080034a0 	.word	0x080034a0
 8003330:	080034a0 	.word	0x080034a0
 8003334:	080034a4 	.word	0x080034a4

08003338 <__itoa>:
 8003338:	1e93      	subs	r3, r2, #2
 800333a:	2b22      	cmp	r3, #34	; 0x22
 800333c:	b510      	push	{r4, lr}
 800333e:	460c      	mov	r4, r1
 8003340:	d904      	bls.n	800334c <__itoa+0x14>
 8003342:	2300      	movs	r3, #0
 8003344:	461c      	mov	r4, r3
 8003346:	700b      	strb	r3, [r1, #0]
 8003348:	4620      	mov	r0, r4
 800334a:	bd10      	pop	{r4, pc}
 800334c:	2a0a      	cmp	r2, #10
 800334e:	d109      	bne.n	8003364 <__itoa+0x2c>
 8003350:	2800      	cmp	r0, #0
 8003352:	da07      	bge.n	8003364 <__itoa+0x2c>
 8003354:	232d      	movs	r3, #45	; 0x2d
 8003356:	700b      	strb	r3, [r1, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	4240      	negs	r0, r0
 800335c:	4421      	add	r1, r4
 800335e:	f000 f80d 	bl	800337c <__utoa>
 8003362:	e7f1      	b.n	8003348 <__itoa+0x10>
 8003364:	2100      	movs	r1, #0
 8003366:	e7f9      	b.n	800335c <__itoa+0x24>

08003368 <itoa>:
 8003368:	f7ff bfe6 	b.w	8003338 <__itoa>

0800336c <memset>:
 800336c:	4603      	mov	r3, r0
 800336e:	4402      	add	r2, r0
 8003370:	4293      	cmp	r3, r2
 8003372:	d100      	bne.n	8003376 <memset+0xa>
 8003374:	4770      	bx	lr
 8003376:	f803 1b01 	strb.w	r1, [r3], #1
 800337a:	e7f9      	b.n	8003370 <memset+0x4>

0800337c <__utoa>:
 800337c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337e:	b08b      	sub	sp, #44	; 0x2c
 8003380:	4605      	mov	r5, r0
 8003382:	460c      	mov	r4, r1
 8003384:	466e      	mov	r6, sp
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <__utoa+0x78>)
 8003388:	f103 0c20 	add.w	ip, r3, #32
 800338c:	4637      	mov	r7, r6
 800338e:	6818      	ldr	r0, [r3, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	3308      	adds	r3, #8
 8003394:	c703      	stmia	r7!, {r0, r1}
 8003396:	4563      	cmp	r3, ip
 8003398:	463e      	mov	r6, r7
 800339a:	d1f7      	bne.n	800338c <__utoa+0x10>
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	791b      	ldrb	r3, [r3, #4]
 80033a0:	6038      	str	r0, [r7, #0]
 80033a2:	713b      	strb	r3, [r7, #4]
 80033a4:	1e93      	subs	r3, r2, #2
 80033a6:	2b22      	cmp	r3, #34	; 0x22
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	d904      	bls.n	80033b8 <__utoa+0x3c>
 80033ae:	7023      	strb	r3, [r4, #0]
 80033b0:	461c      	mov	r4, r3
 80033b2:	4620      	mov	r0, r4
 80033b4:	b00b      	add	sp, #44	; 0x2c
 80033b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b8:	1e66      	subs	r6, r4, #1
 80033ba:	fbb5 f0f2 	udiv	r0, r5, r2
 80033be:	fb02 5510 	mls	r5, r2, r0, r5
 80033c2:	af0a      	add	r7, sp, #40	; 0x28
 80033c4:	443d      	add	r5, r7
 80033c6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	f806 5f01 	strb.w	r5, [r6, #1]!
 80033d0:	4605      	mov	r5, r0
 80033d2:	b968      	cbnz	r0, 80033f0 <__utoa+0x74>
 80033d4:	4622      	mov	r2, r4
 80033d6:	5460      	strb	r0, [r4, r1]
 80033d8:	4423      	add	r3, r4
 80033da:	1b19      	subs	r1, r3, r4
 80033dc:	1b10      	subs	r0, r2, r4
 80033de:	4281      	cmp	r1, r0
 80033e0:	dde7      	ble.n	80033b2 <__utoa+0x36>
 80033e2:	7811      	ldrb	r1, [r2, #0]
 80033e4:	7818      	ldrb	r0, [r3, #0]
 80033e6:	f802 0b01 	strb.w	r0, [r2], #1
 80033ea:	f803 1901 	strb.w	r1, [r3], #-1
 80033ee:	e7f4      	b.n	80033da <__utoa+0x5e>
 80033f0:	460b      	mov	r3, r1
 80033f2:	e7e2      	b.n	80033ba <__utoa+0x3e>
 80033f4:	08003470 	.word	0x08003470

080033f8 <_init>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	bf00      	nop
 80033fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fe:	bc08      	pop	{r3}
 8003400:	469e      	mov	lr, r3
 8003402:	4770      	bx	lr

08003404 <_fini>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	bf00      	nop
 8003408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340a:	bc08      	pop	{r3}
 800340c:	469e      	mov	lr, r3
 800340e:	4770      	bx	lr
